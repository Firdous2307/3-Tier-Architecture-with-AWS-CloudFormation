AWSTemplateFormatVersion: '2010-09-09'

Description: |
  This template creates resources for deploying EC2 instances and an Application Load Balancer (ALB) 
  within a specified Virtual Private Cloud (VPC). The template includes security groups, EC2 instances, 
  and an ALB to support a multi-tier application setup.

Resources:
  # Key Pair (Optional - Uncomment if needed)
  # MyKeyPair:
  #   Type: 'AWS::EC2::KeyPair'
  #   Properties:
  #     KeyName: my-new-key-pair

  # Security group for the Test Server
  TestServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Test Server
      # Import the VPC ID from another stack (VPC-Stack)
      VpcId: !ImportValue 3tier-VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: SecurityGroup1

  # Security group for PHP Server 1
  PHPServer1SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for PHP Server 1
      # Import the VPC ID from another stack (VPC-Stack)
      VpcId: !ImportValue 3tier-VPC
      # Allow inbound traffic from the Test Server's security group and ALB's security group
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref TestServerSecurityGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - SourceSecurityGroupId: !Ref MyALBSecurityGroup
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80  
      Tags:
        - Key: Name
          Value: PHPSecurityGroup1

  # EC2 instance for the Test Server in PublicSubnet1
  TestServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-08f3d5d5f119fbb31 # Amazon Linux 2 AMI
      KeyName: my-new-key-pair
      SubnetId: !ImportValue 3tier-PublicSubnet1
      SecurityGroupIds:
        - !Ref TestServerSecurityGroup
      Tags:
        - Key: Name
          Value: test-server

  # EC2 instance for PHP Server 1 in PrivateSubnet1
  PHPServer1Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-08f3d5d5f119fbb31 # Amazon Linux 2 AMI
      KeyName: my-new-key-pair
      SubnetId: !ImportValue 3tier-PrivateSubnet1
      SecurityGroupIds:
        - !Ref PHPServer1SecurityGroup
      Tags:
        - Key: Name
          Value: php-server-1

  # EC2 instance for PHP Server 2 in PrivateSubnet2
  PHPServer2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-08f3d5d5f119fbb31 # Amazon Linux 2 AMI
      KeyName: my-new-key-pair
      SubnetId: !ImportValue 3tier-PrivateSubnet2
      SecurityGroupIds:
        - !Ref PHPServer1SecurityGroup  
      Tags:
        - Key: Name
          Value: php-server-2

  # Application Load Balancer Security Group
  MyALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB 
      GroupName: ALB_SG
      VpcId: !ImportValue 3tier-VPC
      SecurityGroupIngress: 
        - 
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp

  # Application Load Balancer
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Scheme: internet-facing
      Type: application
      Subnets: 
        - !ImportValue 3tier-PublicSubnet1
        - !ImportValue 3tier-PublicSubnet2
      SecurityGroups: 
        - !Ref MyALBSecurityGroup
      IpAddressType: ipv4

  # Application Load Balancer Target Group
  MyALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyALBTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue 3tier-VPC
      TargetType: instance
      HealthCheckIntervalSeconds: 180
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 5
      Matcher: 
        HttpCode: 200
      UnhealthyThresholdCount: 5
      Targets: 
      - Id: !Ref PHPServer1Instance
      - Id: !Ref PHPServer2Instance     

  # Application Load Balancer Listener
  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP
      DefaultActions: 
        - 
          TargetGroupArn: !Ref MyALBTargetGroup
          Type: forward    

Outputs:
  TestServerInstanceOutput:
    Description: ID of the Test Server EC2 instance
    Value: !Ref TestServerInstance
    Export:
      Name: 3tier-TestServerInstance

  PHPServer1InstanceOutput:
    Description: ID of the PHP Server 1 EC2 instance
    Value: !Ref PHPServer1Instance
    Export:
      Name: 3tier-PHPServer1Instance

  PHPServer2InstanceOutput:
    Description: ID of the PHP Server 2 EC2 instance
    Value: !Ref PHPServer2Instance
    Export:
      Name: 3tier-PHPServer2Instance

  TestServerSecurityGroupId:
    Description: ID of the Test Server Security Group
    Value: !Ref TestServerSecurityGroup
    Export:
      Name: 3tier-TestServerSecurityGroup

  PHPServer1SecurityGroupId:
    Description: ID of the PHP Server Security Group
    Value: !Ref PHPServer1SecurityGroup
    Export:
      Name: 3tier-PHPServer1SecurityGroup

  MyALBDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt MyALB.DNSName
    Export:
      Name: 3tier-MyALBDNSName

  MyALBSecurityGroupId:
    Description: ID of the Application Load Balancer Security Group
    Value: !Ref MyALBSecurityGroup
    Export:
      Name: 3tier-MyALBSecurityGroup

  MyALBId:
    Description: ID of the Application Load Balancer
    Value: !Ref MyALB
    Export:
      Name: 3tier-MyALB

  MyALBTargetGroupId:
    Description: ID of the Target Group associated with the ALB
    Value: !Ref MyALBTargetGroup
    Export:
      Name: 3tier-MyALBTargetGroup
