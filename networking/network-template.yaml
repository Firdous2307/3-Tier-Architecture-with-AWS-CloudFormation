AWSTemplateFormatVersion: 2010-09-09
# Physical Layer
Parameters:
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16  # Default CIDR block for the VPC
  Az1:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-2a  # Default Availability Zone
  SubnetCidrBlocks:
    Description: "A list of CIDR blocks for subnets"
    Type: CommaDelimitedList
    Default: >
      10.0.0.0/24, 
      10.0.4.0/24,
      10.0.8.0/24,
      10.0.12.0/24,
      10.0.16.0/24,
      10.0.20.0/24,
      10.0.24.0/24,
      10.0.28.0/24,
      10.0.32.0/24
  Az2:
    Description: "Availability Zones for subnets"
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "us-east-2b"
  Az3:
    Description: "Additional Availability Zones for subnets"
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "us-east-2c"

# Data Link Layer (VPC and Subnets)
# Create the VPC resource using the specified parameters.
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock  # Use the VpcCidrBlock parameter value
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC
  # adding Internet Gateway and NAT Gateway for Public Access to the Internet
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref IGW

  MyEIP:
    Type: AWS::EC2::EIP

  NATGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NATGateWay
   
  PublicSubnet1:
   Type: AWS::EC2::Subnet
   Properties:
      AvailabilityZone: !Ref Az1
      CidrBlock: !Select [0, !Ref SubnetCidrBlocks] # Use the first CIDR block from SubnetCidrBlocks
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicSubnet1  # Name tag for identification in AWS Console
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Az2
      CidrBlock: !Select [1, !Ref SubnetCidrBlocks] # Use the second CIDR block from SubnetCidrBlocks
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicSubnet2  # Name tag for identification in AWS Console
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Az3
      CidrBlock: !Select [2, !Ref SubnetCidrBlocks] # Use the third CIDR block from SubnetCidrBlocks
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicSubnet3  # Name tag for identification in AWS Console
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Az1
      CidrBlock: !Select [3, !Ref SubnetCidrBlocks]  # Use the fourth CIDR block from SubnetCidrBlocks
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateSubnet1  # Name tag for identification in AWS Console        
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Az2
      CidrBlock: !Select [4, !Ref SubnetCidrBlocks]  # Use the fifth CIDR block from SubnetCidrBlocks
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateSubnet2  # Name tag for identification in AWS Console        
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Az3
      CidrBlock: !Select [5, !Ref SubnetCidrBlocks]  # Use the sixth CIDR block from SubnetCidrBlocks
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateSubnet3  # Name tag for identification in AWS Console        
  PrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Az1
      CidrBlock: !Select [6, !Ref SubnetCidrBlocks]  # Use the seventh CIDR block from SubnetCidrBlocks
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateDBSubnet1  # Name tag for identification in AWS Console
  PrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Az2
      CidrBlock: !Select [7, !Ref SubnetCidrBlocks]  # Use the eighth CIDR block from SubnetCidrBlocks
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateDBSubnet2  # Name tag for identification in AWS Console 
  PrivateDBSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Az3
      CidrBlock: !Select [8, !Ref SubnetCidrBlocks]  # Use the nineth CIDR block from SubnetCidrBlocks
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateDBSubnet3  # Name tag for identification in AWS Console        
               
# Adding Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC # Associates the route table with the MyVPC 
      Tags:
        - Key: Name
          Value: PublicRouteTable  # Name tag for identification in AWS Console
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC # Associates the route table with the MyVPC 
      Tags:
        - Key: Name
          Value: PrivateRouteTable  # Name tag for identification in AWS Console
  DBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC   # Associates the route table with the MyVPC   
      Tags:
        - Key: Name
          Value: DBRouteTable  # Name tag for identification in AWS Console         

# Associating the route tables with their various subnets
  PublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable  
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable  
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable  
      SubnetId: !Ref PublicSubnet3
  PrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable  
      SubnetId: !Ref PrivateSubnet1  
  PrivateSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable  
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable  
      SubnetId: !Ref PrivateSubnet3
  PrivateDBSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable 
      SubnetId: !Ref PrivateDBSubnet1 
  PrivateDBSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable 
      SubnetId: !Ref PrivateDBSubnet2
  PrivateDBSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable 
      SubnetId: !Ref PrivateDBSubnet3                   